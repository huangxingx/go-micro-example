// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/shop/shop.proto

package com_example_srv_shop

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for ShopManagerService service

type ShopManagerService interface {
	Create(ctx context.Context, in *ShopDetail, opts ...client.CallOption) (*Response, error)
	GetList(ctx context.Context, in *Request, opts ...client.CallOption) (*ShopListItem, error)
	GetById(ctx context.Context, in *Request, opts ...client.CallOption) (*ShopDetail, error)
	Disable(ctx context.Context, in *Request, opts ...client.CallOption) (*Response, error)
}

type shopManagerService struct {
	c    client.Client
	name string
}

func NewShopManagerService(name string, c client.Client) ShopManagerService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "com.example.srv.shop"
	}
	return &shopManagerService{
		c:    c,
		name: name,
	}
}

func (c *shopManagerService) Create(ctx context.Context, in *ShopDetail, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "ShopManagerService.Create", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shopManagerService) GetList(ctx context.Context, in *Request, opts ...client.CallOption) (*ShopListItem, error) {
	req := c.c.NewRequest(c.name, "ShopManagerService.GetList", in)
	out := new(ShopListItem)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shopManagerService) GetById(ctx context.Context, in *Request, opts ...client.CallOption) (*ShopDetail, error) {
	req := c.c.NewRequest(c.name, "ShopManagerService.GetById", in)
	out := new(ShopDetail)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shopManagerService) Disable(ctx context.Context, in *Request, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "ShopManagerService.Disable", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for ShopManagerService service

type ShopManagerServiceHandler interface {
	Create(context.Context, *ShopDetail, *Response) error
	GetList(context.Context, *Request, *ShopListItem) error
	GetById(context.Context, *Request, *ShopDetail) error
	Disable(context.Context, *Request, *Response) error
}

func RegisterShopManagerServiceHandler(s server.Server, hdlr ShopManagerServiceHandler, opts ...server.HandlerOption) error {
	type shopManagerService interface {
		Create(ctx context.Context, in *ShopDetail, out *Response) error
		GetList(ctx context.Context, in *Request, out *ShopListItem) error
		GetById(ctx context.Context, in *Request, out *ShopDetail) error
		Disable(ctx context.Context, in *Request, out *Response) error
	}
	type ShopManagerService struct {
		shopManagerService
	}
	h := &shopManagerServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&ShopManagerService{h}, opts...))
}

type shopManagerServiceHandler struct {
	ShopManagerServiceHandler
}

func (h *shopManagerServiceHandler) Create(ctx context.Context, in *ShopDetail, out *Response) error {
	return h.ShopManagerServiceHandler.Create(ctx, in, out)
}

func (h *shopManagerServiceHandler) GetList(ctx context.Context, in *Request, out *ShopListItem) error {
	return h.ShopManagerServiceHandler.GetList(ctx, in, out)
}

func (h *shopManagerServiceHandler) GetById(ctx context.Context, in *Request, out *ShopDetail) error {
	return h.ShopManagerServiceHandler.GetById(ctx, in, out)
}

func (h *shopManagerServiceHandler) Disable(ctx context.Context, in *Request, out *Response) error {
	return h.ShopManagerServiceHandler.Disable(ctx, in, out)
}
